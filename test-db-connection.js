const { neon } = require('@neondatabase/serverless');
const crypto = require('crypto');
require('dotenv').config({ path: '.env.local' });

const sql = neon(process.env.DATABASE_URL);

async function testDatabase() {
  try {
    console.log('üîç Testando conex√£o com o banco...');
    
    // Testar conex√£o
    const result = await sql`SELECT NOW()`;
    console.log('‚úÖ Conex√£o OK:', result[0]);
    
    // Verificar tabelas
    const tables = await sql`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `;
    console.log('üìã Tabelas encontradas:', tables.map(t => t.table_name));
    
    // Criar usu√°rio de teste
    const testUserId = crypto.randomUUID();
    const testUser = await sql`
      INSERT INTO users (id, email, name, password)
      VALUES (${testUserId}, 'teste@exemplo.com', 'Usu√°rio Teste', 'senha123')
      RETURNING id, email, name
    `;
    console.log('üë§ Usu√°rio de teste criado:', testUser[0]);
    
    // Verificar usu√°rio
    const user = await sql`
      SELECT * FROM users WHERE email = 'teste@exemplo.com'
    `;
    console.log('‚úÖ Usu√°rio encontrado:', user[0]);
    
    // Limpar usu√°rio de teste
    await sql`DELETE FROM users WHERE email = 'teste@exemplo.com'`;
    console.log('üßπ Usu√°rio de teste removido');
    
    console.log('üéâ Banco de dados funcionando perfeitamente!');
    
  } catch (error) {
    console.error('‚ùå Erro no teste:', error);
  }
}

testDatabase();
