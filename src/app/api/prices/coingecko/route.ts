import { NextResponse } from 'next/server';

const COINGECKO_API_KEY = 'CG-9W1U48SPhUME6EeyinMWDtJs';
const COINGECKO_BASE_URL = 'https://api.coingecko.com/api/v3';

// Cache global para tokens da CoinGecko (mesmo do buscador)
let ALL_TOKENS_CACHE: any[] = [];
let CACHE_TIMESTAMP = 0;
const CACHE_DURATION = 1 * 60 * 60 * 1000; // 1 hora (reduzido para debug)

// Fun√ß√£o para buscar todos os tokens da CoinGecko (mesma do buscador)
async function getAllTokensFromCoinGecko() {
  const now = Date.now();
  
  // Verificar se o cache ainda √© v√°lido
  if (ALL_TOKENS_CACHE.length > 0 && (now - CACHE_TIMESTAMP) < CACHE_DURATION) {
    console.log('üì¶ Usando cache de tokens:', ALL_TOKENS_CACHE.length, 'tokens');
    return ALL_TOKENS_CACHE;
  }

  try {
    console.log('üîÑ Buscando todos os tokens da CoinGecko...');
    
    // Buscar lista muito mais completa de tokens (m√∫ltiplas p√°ginas)
    let allTokens: any[] = [];
    
    // Buscar muito mais p√°ginas para incluir tokens de baixa capitaliza√ß√£o (at√© posi√ß√£o #15000)
    for (let page = 1; page <= 60; page++) {
      const response = await fetch(`${COINGECKO_BASE_URL}/coins/markets?vs_currency=usd&order=market_cap_desc&per_page=250&page=${page}&sparkline=false&price_change_percentage=24h`, {
        headers: {
          'Accept': 'application/json',
          'User-Agent': 'SenhorBarriga-Portfolio/1.0',
          'X-CG-API-KEY': COINGECKO_API_KEY
        },
        cache: 'no-store',
        next: { revalidate: 300 } // Cache por 5 minutos (reduzido para debug)
      });

      if (response.ok) {
        const data = await response.json();
        allTokens = allTokens.concat(data);
        console.log(`üìÑ P√°gina ${page}: ${data.length} tokens encontrados`);
        
        // Se n√£o h√° mais dados, parar
        if (data.length === 0) break;
        
        // Adicionar delay para evitar rate limiting
        if (page < 60) {
          await new Promise(resolve => setTimeout(resolve, 100)); // 100ms delay
        }
      } else {
        console.log(`‚ö†Ô∏è Erro na p√°gina ${page}:`, response.status, response.statusText);
        if (response.status === 429) {
          console.log('üö´ Rate limit atingido, parando busca');
        }
        break;
      }
    }
    
    console.log('‚úÖ Busca completa funcionou:', allTokens.length, 'tokens encontrados no total');
    
    // Processar e cachear os tokens
    ALL_TOKENS_CACHE = allTokens.map(coin => ({
      id: coin.id,
      name: coin.name,
      symbol: coin.symbol.toUpperCase(),
      imageUrl: coin.image,
      marketCapRank: coin.market_cap_rank,
      currentPrice: coin.current_price,
      priceChange24h: coin.price_change_percentage_24h,
      marketCap: coin.market_cap,
      volume24h: coin.total_volume,
      score: 1.0 // Score alto para todos os tokens listados
    }));
    
    CACHE_TIMESTAMP = now;
    return ALL_TOKENS_CACHE;
  } catch (error) {
    console.error('‚ùå Erro ao buscar todos os tokens:', error);
    
    // Se o cache tem dados antigos, usar eles mesmo assim
    if (ALL_TOKENS_CACHE.length > 0) {
      console.log('üîÑ Usando cache antigo devido ao erro:', ALL_TOKENS_CACHE.length, 'tokens');
      return ALL_TOKENS_CACHE;
    }
  }

  return [];
}

// Fun√ß√£o auxiliar para buscar dados de um token espec√≠fico
async function fetchTokenData(symbol: string, coinGeckoId?: string) {
  try {
    let tokenId = coinGeckoId;
    
    // Se n√£o temos o coinGeckoId, buscar o ID do token usando a lista completa
    if (!tokenId) {
      console.log(`üîç Buscando token ${symbol} na lista completa...`);
      
      // Buscar na lista completa de tokens (mesma do buscador)
      const allTokens = await getAllTokensFromCoinGecko();
      
      if (allTokens.length > 0) {
        const symbolUpper = symbol.toUpperCase();
        
        // Primeiro, tentar encontrar um token com s√≠mbolo exato
        let token = allTokens.find(t => t.symbol === symbolUpper);
        
        if (token) {
          console.log(`‚úÖ Token encontrado na lista completa: ${token.id} (${token.symbol})`);
          tokenId = token.id;
        } else {
          // Se n√£o encontrar s√≠mbolo exato, tentar busca por nome
          token = allTokens.find(t => 
            t.name.toLowerCase().includes(symbol.toLowerCase()) ||
            t.symbol.toLowerCase().includes(symbol.toLowerCase())
          );
          
          if (token) {
            console.log(`‚ö†Ô∏è Token encontrado por busca aproximada: ${token.id} (${token.symbol})`);
            tokenId = token.id;
          } else {
            console.log(`‚ùå Token ${symbol} n√£o encontrado na lista completa`);
            
            // Fallback para API de search (como antes)
            console.log(`üîÑ Tentando API de search como fallback...`);
            const searchUrl = `${COINGECKO_BASE_URL}/search?query=${symbol}`;
            const searchResponse = await fetch(searchUrl, {
              headers: {
                'Accept': 'application/json',
                'User-Agent': 'SenhorBarriga-Portfolio/1.0',
                'X-CG-API-KEY': COINGECKO_API_KEY
              },
              cache: 'no-store'
            });

            if (searchResponse.ok) {
              const searchData = await searchResponse.json();
              
              if (searchData.coins && Array.isArray(searchData.coins)) {
                // Buscar o token mais espec√≠fico que corresponda exatamente ao s√≠mbolo
                let searchToken = searchData.coins.find((coin: any) => 
                  coin.symbol?.toUpperCase() === symbolUpper
                );
                
                if (!searchToken) {
                  console.warn(`‚ö†Ô∏è S√≠mbolo exato n√£o encontrado para ${symbol}, usando primeiro resultado`);
                  searchToken = searchData.coins[0];
                }
                
                if (searchToken) {
                  tokenId = searchToken.id;
                  console.log(`‚úÖ Token encontrado via search: ${tokenId} (${searchToken.symbol})`);
                }
              }
            }
          }
        }
      }
    }

    if (!tokenId) {
      console.log(`‚ùå N√£o foi poss√≠vel encontrar o token ${symbol}`);
      return null;
    }

    console.log(`üîç Usando token ID: ${tokenId} para buscar dados detalhados`);

    // Buscar dados detalhados do token
    const detailUrl = `${COINGECKO_BASE_URL}/coins/${tokenId}?localization=false&tickers=false&market_data=true&community_data=false&developer_data=false&sparkline=false`;
    const detailResponse = await fetch(detailUrl, {
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'SenhorBarriga-Portfolio/1.0',
        'X-CG-API-KEY': COINGECKO_API_KEY
      },
      cache: 'no-store'
    });

    if (!detailResponse.ok) {
      console.error(`‚ùå Erro ao buscar detalhes do token ${tokenId}:`, detailResponse.status, detailResponse.statusText);
      return null;
    }

    const detailData = await detailResponse.json();
    console.log(`üìä Dados detalhados para ${tokenId}:`, JSON.stringify(detailData, null, 2));

    return {
      symbol: detailData.symbol?.toUpperCase() || symbol.toUpperCase(),
      name: detailData.name || symbol,
      imageUrl: detailData.image?.large || detailData.image?.small || null,
      priceUsd: parseFloat(detailData.market_data?.current_price?.usd || '0'),
      priceChange24h: parseFloat(detailData.market_data?.price_change_percentage_24h || '0'),
      volume24h: parseFloat(detailData.market_data?.total_volume?.usd || '0'),
      marketCap: parseFloat(detailData.market_data?.market_cap?.usd || '0'),
      updatedAt: new Date().toISOString()
    };
  } catch (error) {
    console.error(`‚ùå Erro ao buscar dados para ${symbol}:`, error);
    return null;
  }
}

// GET - Buscar pre√ßos de um token espec√≠fico
export async function GET(request: Request) {
  try {
    const { searchParams } = new URL(request.url);
    const symbol = searchParams.get('symbol');

    if (!symbol) {
      return NextResponse.json({ 
        success: false, 
        message: 'S√≠mbolo do token √© obrigat√≥rio' 
      }, { status: 400 });
    }

    console.log('üîç Buscando pre√ßo no CoinGecko para:', symbol);

    const tokenData = await fetchTokenData(symbol);

    if (tokenData) {
      console.log('‚úÖ Dados processados:', tokenData);
      return NextResponse.json({ 
        success: true, 
        data: tokenData
      });
    } else {
      return NextResponse.json({ 
        success: false, 
        message: 'Token n√£o encontrado no CoinGecko' 
      }, { status: 404 });
    }

  } catch (error) {
    console.error('‚ùå Erro interno:', error);
    return NextResponse.json({ 
      success: false, 
      message: 'Erro interno do servidor' 
    }, { status: 500 });
  }
}

// POST - Buscar m√∫ltiplos tokens de uma vez
export async function POST(request: Request) {
  try {
    console.log('üì• POST /api/prices/coingecko recebido');
    
    const body = await request.json();
    const { tokens } = body; // Array de { symbol }

    console.log('üì• Body recebido:', JSON.stringify(body, null, 2));

    if (!tokens || !Array.isArray(tokens)) {
      console.log('‚ùå Tokens inv√°lidos:', tokens);
      return NextResponse.json({ 
        success: false, 
        message: 'Lista de tokens √© obrigat√≥ria' 
      }, { status: 400 });
    }

    console.log('üîç Buscando pre√ßos no CoinGecko para m√∫ltiplos tokens:', tokens);

    // Buscar pre√ßos para todos os tokens em paralelo
    const pricePromises = tokens.map(async (token: any) => {
      try {
        const symbol = token.symbol;
        const coinGeckoId = token.coinGeckoId;
        console.log(`üîç Buscando pre√ßo para ${symbol}${coinGeckoId ? ` (ID: ${coinGeckoId})` : ''}...`);
        
        const tokenData = await fetchTokenData(symbol, coinGeckoId);
        
        if (tokenData) {
          return {
            symbol,
            success: true,
            data: tokenData
          };
        } else {
          return {
            symbol,
            success: false,
            error: 'Token n√£o encontrado'
          };
        }
      } catch (error) {
        console.error(`‚ùå Erro para ${token.symbol}:`, error);
        return {
          symbol: token.symbol,
          success: false,
          error: error instanceof Error ? error.message : 'Erro desconhecido'
        };
      }
    });

    const results = await Promise.all(pricePromises);
    
    console.log('üìä Resultados finais:', results.map(r => ({ symbol: r.symbol, success: r.success, error: r.error })));

    return NextResponse.json({
      success: true,
      results: results
    });

  } catch (error) {
    console.error('‚ùå Erro interno:', error);
    return NextResponse.json({ 
      success: false, 
      message: 'Erro interno do servidor' 
    }, { status: 500 });
  }
}
